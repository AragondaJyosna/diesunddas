knit_with_parameters('~/GitHub/diesunddas/GLM/Generalized Linear Models with R.Rmd')
knitr::opts_chunk$set(echo = FALSE, comment = NA, warning = FALSE, message = FALSE)
library(knitr)
hook_output = knit_hooks$get('output')
knit_hooks$set(output = function(x, options) {
# this hook is used only when the linewidth option is not NULL
if (!is.null(n <- options$linewidth)) {
x = knitr:::split_lines(x)
# any lines wider than n should be wrapped
if (any(nchar(x) > n)) x = strwrap(x, width = n)
x = paste(x, collapse = '\n')
}
hook_output(x, options)
})
glmModelPlot <- function(x, y, xlim,ylim, meanPred,  LwPred, UpPred,
plotData, main=NULL){
## Based on code by Arthur Charpentier:
## http://freakonometrics.hypotheses.org/9593
n <- 2
N <- length(meanPred)
zMax <- max(unlist(sapply(plotData, "[[", "z")))*1.5
mat <- persp(xlim, ylim, matrix(0, n, n), main=main,
zlim=c(0, zMax), theta=-30,
ticktype="detailed",box=FALSE)
C <- trans3d(x, UpPred, rep(0, N),mat)
lines(C, lty=2)
C <- trans3d(x, LwPred, rep(0, N), mat)
lines(C, lty=2)
C <- trans3d(c(x, rev(x)), c(UpPred, rev(LwPred)),
rep(0, 2*N), mat)
polygon(C, border=NA, col=adjustcolor("yellow", alpha.f = 0.5))
C <- trans3d(x, meanPred, rep(0, N), mat)
lines(C, lwd=2, col="grey")
C <- trans3d(x, y, rep(0,N), mat)
points(C, lwd=2, col="#00526D")
for(j in N:1){
xp <- plotData[[j]]$x
yp <- plotData[[j]]$y
z0 <- plotData[[j]]$z0
zp <- plotData[[j]]$z
C <- trans3d(c(xp, xp), c(yp, rev(yp)), c(zp, z0), mat)
polygon(C, border=NA, col="light blue", density=40)
C <- trans3d(xp, yp, z0, mat)
lines(C, lty=2)
C <- trans3d(xp, yp, zp, mat)
lines(C, col=adjustcolor("blue", alpha.f = 0.5))
}
}
icecream <- data.frame(
temp=c(11.9, 14.2, 15.2, 16.4, 17.2, 18.1,
18.5, 19.4, 22.1, 22.6, 23.4, 25.1),
units=c(185L, 215L, 332L, 325L, 408L, 421L,
406L, 412L, 522L, 445L, 544L, 614L)
)
basicPlot <- function(...){
plot(units ~ temp, data=icecream, bty="n", lwd=2,
main="Number of ice creams sold", col="#00526D",
xlab="Temperature (Celsius)",
ylab="Units sold", ...)
axis(side = 1, col="grey")
axis(side = 2, col="grey")
}
basicPlot()
lsq.mod <- lsfit(icecream$temp, icecream$units)
basicPlot()
abline(lsq.mod, col="orange", lwd=2)
legend(x="topleft", bty="n", lwd=c(2,2), lty=c(NA,1),
legend=c("observation", "linear least square"),
col=c("#00526D","orange"),  pch=c(1,NA))
library(arm) # for 'display' function only
lin.mod <- glm(units ~ temp, data=icecream,
family=gaussian(link="identity"))
display(lin.mod)
xlim <- c(min(icecream$temp)*0.95, max(icecream$temp)*1.05)
ylim <- c(floor(min(icecream$units)*0.95),
ceiling(max(icecream$units)*1.05))
meanPred <- predict(lin.mod, type="response")
sdgig <- sqrt(summary(lin.mod)$dispersion)
UpPred <- qnorm(.95, meanPred, sdgig)
LwPred <- qnorm(.05, meanPred, sdgig)
plotData <- lapply(
seq(along=icecream$temp),
function(i){
stp <- 251
x = rep(icecream$temp[i], stp)
y = seq(ylim[1], ylim[2], length=stp)
z0 = rep(0, stp)
z = dnorm(y, meanPred[i], sdgig)
return(list(x=x, y=y, z0=z0, z=z))
}
)
glmModelPlot(x = icecream$temp, y=icecream$units,
xlim=xlim, ylim=ylim,
meanPred = meanPred, LwPred = LwPred,
UpPred = UpPred, plotData = plotData)
log.lin.mod <- glm(log(units) ~ temp, data=icecream,
family=gaussian(link="identity"))
display(log.lin.mod)
log.lin.sig <- summary(log.lin.mod)$dispersion
log.lin.pred <- exp(predict(log.lin.mod) + 0.5*log.lin.sig)
basicPlot()
lines(icecream$temp, log.lin.pred, col="red", lwd=2)
legend(x="topleft", bty="n", lwd=c(2,2), lty=c(NA,1),
legend=c("observation", "log-transformed LM"),
col=c("#00526D","red"), pch=c(1,NA))
meanLogPred <- predict(log.lin.mod, type="response")
sdgig <- sqrt(summary(log.lin.mod)$dispersion)
meanPred <- exp(meanLogPred + 0.5 * sdgig^2)
UpPred <- qlnorm(.95, meanlog = meanLogPred, sdlog = sdgig)
LwPred <- qlnorm(.05, meanlog = meanLogPred, sdlog = sdgig)
plotData <- lapply(
seq(along=icecream$temp),
function(i){
stp <- 251
x = rep(icecream$temp[i], stp)
y = seq(ylim[1], ylim[2], length=stp)
z0 = rep(0, stp)
z = dlnorm(y, meanlog = meanLogPred[i], sdlog = sdgig)
return(list(x=x, y=y, z0=z0, z=z))
}
)
glmModelPlot(x = icecream$temp, y=icecream$units,
xlim=xlim, ylim=ylim,
meanPred = meanPred, LwPred = LwPred,
UpPred = UpPred, plotData = plotData)
exp(coef(log.lin.mod)[1] + 0.5 * log.lin.sig)
pois.mod <- glm(units ~ temp, data=icecream,
family=poisson(link="log"))
display(pois.mod)
pois.pred <- predict(pois.mod, type="response")
basicPlot()
lines(icecream$temp, pois.pred, col="blue", lwd=2)
legend(x="topleft", bty="n", lwd=c(2,2), lty=c(NA,1),
legend=c("observation", "Poisson (log) GLM"),
col=c("#00526D","blue"), pch=c(1,NA))
meanPred <- predict(pois.mod, type="response")
UpPred <- qpois(.95, meanPred)
LwPred <- qpois(.05, meanPred)
plotData <- lapply(
seq(along=icecream$temp),
function(i){
y = seq(ylim[1], ylim[2])
x = rep(icecream$temp[i], length(y))
z0 = rep(0, length(y))
z = dpois(y, meanPred[i])
return(list(x=x, y=y, z0=z0, z=z))
}
)
glmModelPlot(x = icecream$temp, y=icecream$units,
xlim=xlim, ylim=ylim,
meanPred = meanPred, LwPred = LwPred,
UpPred = UpPred, plotData = plotData)
predict(pois.mod, newdata=data.frame(temp=32), type="response")
market.size <- 800
icecream$opportunity <- market.size - icecream$units
bin.glm <- glm(cbind(units, opportunity) ~ temp, data=icecream,
family=binomial(link = "logit"))
display(bin.glm)
bin.pred <- predict(bin.glm, type="response")*market.size
basicPlot()
lines(icecream$temp, bin.pred, col="purple", lwd=2)
legend(x="topleft", bty="n", lwd=c(2,2), lty=c(NA,1),
legend=c("observation", "Binomial (logit) GLM"),
col=c("#00526D","purple"),  pch=c(1,NA))
meanPred <- predict(pois.mod, type="response")
UpPred <- qpois(.95, meanPred)
LwPred <- qpois(.05, meanPred)
plotData <- lapply(
seq(along=icecream$temp),
function(i){
y = seq(ylim[1], ylim[2])
x = rep(icecream$temp[i], length(y))
z0 = rep(0, length(y))
z = dpois(y, meanPred[i])
return(list(x=x, y=y, z0=z0, z=z))
}
)
glmModelPlot(x = icecream$temp, y=icecream$units,
xlim=xlim, ylim=ylim,
meanPred = meanPred, LwPred = LwPred,
UpPred = UpPred, plotData = plotData)
plogis(coef(bin.glm)[1])*market.size
plogis(coef(bin.glm)[1] +  coef(bin.glm)[2]*35)*market.size
temp <- 0:35
p.lm <- predict(lin.mod, data.frame(temp=temp), type="response")
p.log.lm <- exp(predict(log.lin.mod, data.frame(temp=0:35), type="response") +
0.5 * summary(log.lin.mod)$dispersion)
p.pois <- predict(pois.mod, data.frame(temp=temp), type="response")
p.bin <- predict(bin.glm, data.frame(temp=temp), type="response")*market.size
basicPlot(xlim=range(temp), ylim=c(-20,market.size))
lines(temp, p.lm, type="l", col="orange", lwd=2)
lines(temp, p.log.lm, type="l", col="red", lwd=2)
lines(temp, p.pois, type="l", col="blue", lwd=2)
lines(temp, p.bin, type="l", col="purple", lwd=2)
legend(x="topleft",
legend=c("observation",
"linear model",
"log-transformed LM",
"Poisson (log) GLM",
"Binomial (logit) GLM"),
col=c("#00526D","orange", "red",
"blue", "purple"),
bty="n", lwd=rep(2,5),
lty=c(NA,rep(1,4)),
pch=c(1,rep(NA,4)))
meanPred
